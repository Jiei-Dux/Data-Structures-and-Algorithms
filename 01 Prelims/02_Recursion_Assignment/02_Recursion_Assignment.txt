Doctor, Sherwin Jay
BS301

Explain in 1 to 3 paragraphs the following:

  1. Linear Recursion [ sentences: ||||| ]
    -   So based on what I understood after reading the "Handout",
      you can call a recursion "linear" if it calls itself ONCE,
      everytime it is executed. If it got called more than ONCE,
      then it is no longer "linear". It doesn't really matter where
      it is in the method as long as it is only being called ONCE.
      No matter if it is at the beginning of the method, middle, or
      at the very end, as long as it is only being called ONCE ONCE
      it get executed by the user or whatever/whoever is running
      this thing. It's that plain and simple, if recursion called
      once, then it is "linear", else it is not "linear", done!

    Example:
      This recursion can be used when making/creating a program
      or scrpt that solves exponents. Solving exponents like,
      wanting to find out what it is, like for example, 3 to the 
      power of 5, then the program / script will output 243.



  2. Tail Recursion [ sentences: ||||| ]
    -   So based on what I understood after reading the "Handout", 
      you call a recursion "tail" if it calls itself at the very end.
      It is called "tail" if you see in the code, it calling itself
      as the last command, function, whatever you call it. You should
      be able to see it at the very end of... the recursion? code? I
      don't know what to call it. You can only call it "tail" if the
      code executed the code at the very very end. Not at the 
      beginning nor the middle, but at the very end of the method.

    Example: 
      This recursion can be used when making/creating a program
      or script that doesn't need to work after executing commands,
      and/or instructions.



  3. Binary Recursion [ sentences: ||||| ]
    -   So based on what I understood after reading the "Handout",
      you call a recursion "binary" if it calls itself TWICE,
      everytime it is being executed. If the recursion got called
      more than TWICE or less than TWICE, then it isn't "binary"
      anymore. This one is actually like "Linear", the only 
      difference is that "linear" is being called "linear" because
      it is being called ONCE everytime it is being  executed.
      "Binary" on the other hand is being called that because it
      is being called TWICE everytime it is being executed. Just like
      "linear", it really doesn't matter where in the method it is in.

    Example: 
      This recursion can be used when making/creating a program
      or script that works with Fibonacci. I know, I know, but 
      this is the only thing that I can think of right now after
      reading the handout and the articles on the internet... :)



  4. Mutual Recursion [ sentences: ||||| ]
    -   So based on what I understood after reading the "Handout",
      you call a recursion "mutual" if it has atleast ONE PARTNER.
      It has atleast ONE PARTNER and both are calling each other.
      It really doesn't matter whether there is a pair of them
      calling each other or a group of them, they're still going
      to be called "mutual" recursion. It also doesn't matter
      where they're located in the method. Whether their locations
      are at the beginning, middle, or end.

    Example: 
      This recursion can be used when making/creating a program
      or script that has multiple, or at least more than one 
      options and can ask the user to select either one of the 
      options displayed.
